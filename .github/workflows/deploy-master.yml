name: üöÄ Master Deployment Controller

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Select deployment type'
        required: true
        type: choice
        options:
        - 'docker-registry'
        - 'cloud-aws'
        - 'cloud-gcp'
        - 'cloud-azure'
        - 'vps-staging'
        - 'vps-production'
        - 'github-pages'
        - 'all-environments'
      confirm_production:
        description: 'Type "CONFIRM" to deploy to production'
        required: false
        default: ''

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      deployment_type: ${{ steps.validate.outputs.deployment_type }}
      
    steps:
    - name: Validate deployment
      id: validate
      run: |
        DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
        CONFIRM="${{ github.event.inputs.confirm_production }}"
        
        echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
        
        # Check if production deployment requires confirmation
        if [[ "$DEPLOYMENT_TYPE" == *"production"* ]] || [[ "$DEPLOYMENT_TYPE" == "all-environments" ]]; then
          if [[ "$CONFIRM" != "CONFIRM" ]]; then
            echo "‚ùå Production deployment requires confirmation. Please type 'CONFIRM' in the confirmation field."
            echo "is_valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
        
        echo "‚úÖ Deployment request validated"
        echo "is_valid=true" >> $GITHUB_OUTPUT

  trigger-docker-deployment:
    name: üê≥ Deploy Docker Images
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'docker-registry' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-docker.yml
    with:
      environment: production
    secrets: inherit

  trigger-aws-deployment:
    name: ‚òÅÔ∏è Deploy to AWS
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'cloud-aws' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-cloud.yml
    with:
      platform: aws
      environment: production
    secrets: inherit

  trigger-gcp-deployment:
    name: ‚òÅÔ∏è Deploy to Google Cloud
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'cloud-gcp' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-cloud.yml
    with:
      platform: gcp
      environment: production
    secrets: inherit

  trigger-azure-deployment:
    name: ‚òÅÔ∏è Deploy to Azure
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'cloud-azure' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-cloud.yml
    with:
      platform: azure
      environment: production
    secrets: inherit

  trigger-vps-staging:
    name: üñ•Ô∏è Deploy to VPS Staging
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'vps-staging' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-vps.yml
    with:
      environment: staging
    secrets: inherit

  trigger-vps-production:
    name: üñ•Ô∏è Deploy to VPS Production
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'vps-production' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-vps.yml
    with:
      environment: production
    secrets: inherit

  trigger-docs-deployment:
    name: üìö Deploy Documentation
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && (github.event.inputs.deployment_type == 'github-pages' || github.event.inputs.deployment_type == 'all-environments')
    uses: ./.github/workflows/deploy-docs.yml
    secrets: inherit

  deployment-summary:
    name: üìä Deployment Summary
    runs-on: ubuntu-latest
    needs: [
      validate-deployment,
      trigger-docker-deployment,
      trigger-aws-deployment,
      trigger-gcp-deployment,
      trigger-azure-deployment,
      trigger-vps-staging,
      trigger-vps-production,
      trigger-docs-deployment
    ]
    if: always()
    
    steps:
    - name: Generate deployment report
      run: |
        echo "# üöÄ Deployment Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## üìã Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Docker deployment status
        if [[ "${{ needs.trigger-docker-deployment.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-docker-deployment.result }}" == "success" ]]; then
            echo "- üê≥ **Docker Registry:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üê≥ **Docker Registry:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # AWS deployment status
        if [[ "${{ needs.trigger-aws-deployment.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-aws-deployment.result }}" == "success" ]]; then
            echo "- ‚òÅÔ∏è **AWS:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚òÅÔ∏è **AWS:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # GCP deployment status
        if [[ "${{ needs.trigger-gcp-deployment.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-gcp-deployment.result }}" == "success" ]]; then
            echo "- ‚òÅÔ∏è **Google Cloud:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚òÅÔ∏è **Google Cloud:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Azure deployment status
        if [[ "${{ needs.trigger-azure-deployment.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-azure-deployment.result }}" == "success" ]]; then
            echo "- ‚òÅÔ∏è **Azure:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚òÅÔ∏è **Azure:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # VPS Staging deployment status
        if [[ "${{ needs.trigger-vps-staging.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-vps-staging.result }}" == "success" ]]; then
            echo "- üñ•Ô∏è **VPS Staging:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üñ•Ô∏è **VPS Staging:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # VPS Production deployment status
        if [[ "${{ needs.trigger-vps-production.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-vps-production.result }}" == "success" ]]; then
            echo "- üñ•Ô∏è **VPS Production:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üñ•Ô∏è **VPS Production:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Documentation deployment status
        if [[ "${{ needs.trigger-docs-deployment.result }}" != "skipped" ]]; then
          if [[ "${{ needs.trigger-docs-deployment.result }}" == "success" ]]; then
            echo "- üìö **Documentation:** ‚úÖ Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "- üìö **Documentation:** ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üîó Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
        echo "- [Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
        echo "- [Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY

    - name: Send notification
      if: vars.DISCORD_WEBHOOK_URL
      run: |
        # Determine overall status
        OVERALL_STATUS="‚úÖ Success"
        COLOR=3066993
        
        if [[ "${{ needs.trigger-docker-deployment.result }}" == "failure" ]] || 
           [[ "${{ needs.trigger-aws-deployment.result }}" == "failure" ]] ||
           [[ "${{ needs.trigger-gcp-deployment.result }}" == "failure" ]] ||
           [[ "${{ needs.trigger-azure-deployment.result }}" == "failure" ]] ||
           [[ "${{ needs.trigger-vps-staging.result }}" == "failure" ]] ||
           [[ "${{ needs.trigger-vps-production.result }}" == "failure" ]] ||
           [[ "${{ needs.trigger-docs-deployment.result }}" == "failure" ]]; then
          OVERALL_STATUS="‚ùå Partial Failure"
          COLOR=15158332
        fi
        
        curl -H "Content-Type: application/json" \
             -X POST \
             -d "{\"embeds\": [{
               \"title\": \"üöÄ Deployment Complete\",
               \"description\": \"**Type:** ${{ github.event.inputs.deployment_type }}\\n**Status:** $OVERALL_STATUS\\n**Triggered by:** ${{ github.actor }}\",
               \"color\": $COLOR,
               \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
             }]}" \
             ${{ vars.DISCORD_WEBHOOK_URL }}
