name: 🚀 Master Deployment Controller

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Select deployment type'
        required: true
        type: choice
        options:
        - 'docker-registry'
        - 'github-pages'
        - 'staging-demo'
      confirm_deployment:
        description: 'Type "DEPLOY" to confirm'
        required: true
        default: ''

jobs:
  validate-deployment:
    name: Validate Deployment Request
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      deployment_type: ${{ steps.validate.outputs.deployment_type }}
      
    steps:
    - name: Validate deployment
      id: validate
      run: |
        DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}"
        CONFIRM="${{ github.event.inputs.confirm_deployment }}"
        
        echo "deployment_type=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
        
        if [[ "$CONFIRM" != "DEPLOY" ]]; then
          echo "❌ Deployment requires confirmation. Please type 'DEPLOY' in the confirmation field."
          echo "is_valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "✅ Deployment request validated"
        echo "is_valid=true" >> $GITHUB_OUTPUT

  docker-deployment:
    name: 🐳 Build and Push Docker Image
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && github.event.inputs.deployment_type == 'docker-registry'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
          
    - name: Create optimized Dockerfile
      run: |
        cat > Dockerfile << 'DOCKER_EOF'
        FROM node:18-alpine
        
        # Install system dependencies
        RUN apk add --no-cache git python3 make g++
        
        # Create app directory
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production && npm cache clean --force
        
        # Copy application code
        COPY . .
        
        # Create non-root user
        RUN addgroup -g 1001 -S minecraft && \
            adduser -S minecraftbot -u 1001 -G minecraft && \
            chown -R minecraftbot:minecraft /app
        
        # Switch to non-root user
        USER minecraftbot
        
        # Expose port
        EXPOSE 3000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
          CMD node -e "console.log('Bot health check OK')" || exit 1
        
        # Default command
        CMD ["npm", "start"]
        DOCKER_EOF
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docs-deployment:
    name: 📚 Deploy Documentation
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && github.event.inputs.deployment_type == 'github-pages'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate documentation
      run: |
        mkdir -p docs/site
        
        # Create simple documentation site
        cat > docs/site/index.html << 'HTML_EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Iron Anarchy Minecraft Bot</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; }
                h1 { color: #333; text-align: center; }
                .btn { display: inline-block; padding: 12px 24px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>🤖 Iron Anarchy Minecraft Bot</h1>
                <p>Enterprise-grade Minecraft automation bot with Discord integration.</p>
                <a href="https://github.com/Localacct21/iron-anarchy-minecraft-bot" class="btn">GitHub Repository</a>
                <a href="https://github.com/Localacct21/iron-anarchy-minecraft-bot/releases" class="btn">Releases</a>
            </div>
        </body>
        </html>
        HTML_EOF
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: 'docs/site'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  demo-deployment:
    name: 🎯 Demo Deployment
    needs: validate-deployment
    if: needs.validate-deployment.outputs.is_valid == 'true' && github.event.inputs.deployment_type == 'staging-demo'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --only=production
      
    - name: Create demo configuration
      run: |
        mkdir -p config
        cat > config/config.json << 'CONFIG_EOF'
        {
          "bot": {
            "username": "DemoBot",
            "auth": "offline"
          },
          "server": {
            "host": "localhost",
            "port": 25565,
            "version": "1.19.2"
          },
          "features": {
            "autoEat": true,
            "pathfinding": true,
            "autoArmor": true
          }
        }
        CONFIG_EOF
        
    - name: Test bot startup
      run: |
        echo "🚀 Testing bot startup..."
        timeout 10s npm start || echo "✅ Bot startup test completed"
        
    - name: Create deployment package
      run: |
        tar -czf demo-deployment.tar.gz --exclude=node_modules --exclude=.git .
        echo "✅ Demo deployment package created"

  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-deployment, docker-deployment, docs-deployment, demo-deployment]
    if: always()
    
    steps:
    - name: Generate deployment report
      run: |
        echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Type:** ${{ github.event.inputs.deployment_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.docker-deployment.result }}" == "success" ]]; then
          echo "- 🐳 **Docker Registry:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.docker-deployment.result }}" == "failure" ]]; then
          echo "- 🐳 **Docker Registry:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.docs-deployment.result }}" == "success" ]]; then
          echo "- 📚 **Documentation:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.docs-deployment.result }}" == "failure" ]]; then
          echo "- 📚 **Documentation:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.demo-deployment.result }}" == "success" ]]; then
          echo "- 🎯 **Demo:** ✅ Success" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.demo-deployment.result }}" == "failure" ]]; then
          echo "- 🎯 **Demo:** ❌ Failed" >> $GITHUB_STEP_SUMMARY
        fi
